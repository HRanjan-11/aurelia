{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["const lookup = new Map<object, Platform>();\n\nfunction notImplemented(name: string): (...args: any[]) => any {\n  return function notImplemented() {\n    throw new Error(`The PLATFORM did not receive a valid reference to the global function '${name}'.`); // TODO: link to docs describing how to fix this issue\n  };\n}\n\nexport class Platform<TGlobal extends typeof globalThis = typeof globalThis> {\n  // http://www.ecma-international.org/ecma-262/#sec-value-properties-of-the-global-object\n  public readonly globalThis: TGlobal;\n\n  // http://www.ecma-international.org/ecma-262/#sec-function-properties-of-the-global-object\n  public readonly decodeURI: TGlobal['decodeURI'];\n  public readonly decodeURIComponent: TGlobal['decodeURIComponent'];\n  public readonly encodeURI: TGlobal['encodeURI'];\n  public readonly encodeURIComponent: TGlobal['encodeURIComponent'];\n\n  // http://www.ecma-international.org/ecma-262/#sec-constructor-properties-of-the-global-object\n  public readonly Date: TGlobal['Date'];\n\n  // http://www.ecma-international.org/ecma-262/#sec-other-properties-of-the-global-object\n  public readonly Reflect: TGlobal['Reflect'];\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope\n  // Note: we're essentially assuming that all of these are available, even if we aren't even\n  // in a browser environment. They are available in major envs as well (NodeJS, NativeScript, etc),\n  // or can otherwise be mocked fairly easily. If not, things probably won't work anyway.\n  public readonly clearInterval: TGlobal['clearInterval'];\n  public readonly clearTimeout: TGlobal['clearTimeout'];\n  public readonly queueMicrotask: TGlobal['queueMicrotask'];\n  public readonly setInterval: TGlobal['setInterval'];\n  public readonly setTimeout: TGlobal['setTimeout'];\n  public readonly console: TGlobal['console'];\n\n  public readonly performanceNow: () => number;\n\n  public readonly taskQueue: TaskQueue;\n\n  public constructor(g: TGlobal, overrides: Partial<Exclude<Platform, 'globalThis'>> = {}) {\n    this.globalThis = g;\n    this.decodeURI = 'decodeURI' in overrides ? overrides.decodeURI! : g.decodeURI;\n    this.decodeURIComponent = 'decodeURIComponent' in overrides ? overrides.decodeURIComponent! : g.decodeURIComponent;\n    this.encodeURI = 'encodeURI' in overrides ? overrides.encodeURI! : g.encodeURI;\n    this.encodeURIComponent = 'encodeURIComponent' in overrides ? overrides.encodeURIComponent! : g.encodeURIComponent;\n\n    this.Date = 'Date' in overrides ? overrides.Date! : g.Date;\n\n    this.Reflect = 'Reflect' in overrides ? overrides.Reflect! : g.Reflect;\n\n    this.clearInterval = 'clearInterval' in overrides ? overrides.clearInterval! : g.clearInterval?.bind(g) ?? notImplemented('clearInterval');\n    this.clearTimeout = 'clearTimeout' in overrides ? overrides.clearTimeout! : g.clearTimeout?.bind(g) ?? notImplemented('clearTimeout');\n    this.queueMicrotask = 'queueMicrotask' in overrides ? overrides.queueMicrotask! : g.queueMicrotask?.bind(g) ?? notImplemented('queueMicrotask');\n    this.setInterval = 'setInterval' in overrides ? overrides.setInterval! : g.setInterval?.bind(g) ?? notImplemented('setInterval');\n    this.setTimeout = 'setTimeout' in overrides ? overrides.setTimeout! : g.setTimeout?.bind(g) ?? notImplemented('setTimeout');\n    this.console = 'console' in overrides ? overrides.console! : g.console;\n\n    this.performanceNow = 'performanceNow' in overrides ? overrides.performanceNow! : g.performance?.now?.bind(g.performance) ?? notImplemented('performance.now');\n\n    this.flushMacroTask = this.flushMacroTask.bind(this);\n    this.taskQueue = new TaskQueue(this, this.requestMacroTask.bind(this), this.cancelMacroTask.bind(this));\n  }\n\n  public static getOrCreate<TGlobal extends typeof globalThis = typeof globalThis>(\n    g: TGlobal,\n    overrides: Partial<Exclude<Platform, 'globalThis'>> = {},\n  ): Platform<TGlobal> {\n    let platform = lookup.get(g);\n    if (platform === void 0) {\n      lookup.set(g, platform = new Platform(g, overrides));\n    }\n    return platform as Platform<TGlobal>;\n  }\n\n  public static set(g: typeof globalThis, platform: Platform): void {\n    lookup.set(g, platform);\n  }\n\n  protected macroTaskRequested: boolean = false;\n  protected macroTaskHandle: number = -1;\n  protected requestMacroTask(): void {\n    this.macroTaskRequested = true;\n    if (this.macroTaskHandle === -1) {\n      this.macroTaskHandle = this.setTimeout(this.flushMacroTask, 0);\n    }\n  }\n  protected cancelMacroTask(): void {\n    this.macroTaskRequested = false;\n    if (this.macroTaskHandle > -1) {\n      this.clearTimeout(this.macroTaskHandle);\n      this.macroTaskHandle = -1;\n    }\n  }\n  protected flushMacroTask(): void {\n    this.macroTaskHandle = -1;\n    if (this.macroTaskRequested === true) {\n      this.macroTaskRequested = false;\n      this.taskQueue.flush();\n    }\n  }\n}\n\ntype TaskCallback<T = any> = (delta: number) => T;\n\nfunction isPersistent(task: Task): boolean {\n  return task.persistent;\n}\nexport class TaskQueue {\n  private processing: Task[] = [];\n\n  private suspenderTask: Task | undefined = void 0;\n  private pendingAsyncCount: number = 0;\n\n  private pending: Task[] = [];\n  private delayed: Task[] = [];\n\n  private flushRequested: boolean = false;\n  private yieldPromise: ExposedPromise | undefined = void 0;\n\n  private readonly taskPool: Task[] = [];\n  private taskPoolSize: number = 0;\n  private lastRequest: number = 0;\n  private lastFlush: number = 0;\n\n  public get isEmpty(): boolean {\n    return (\n      this.pendingAsyncCount === 0 &&\n      this.processing.length === 0 &&\n      this.pending.length === 0 &&\n      this.delayed.length === 0\n    );\n  }\n\n  /**\n   * Persistent tasks will re-queue themselves indefinitely until they are explicitly canceled,\n   * so we consider them 'infinite work' whereas non-persistent (one-off) tasks are 'finite work'.\n   *\n   * This `hasNoMoreFiniteWork` getters returns true if either all remaining tasks are persistent, or if there are no more tasks.\n   *\n   * If that is the case, we can resolve the promise that was created when `yield()` is called.\n   */\n  private get hasNoMoreFiniteWork(): boolean {\n    return (\n      this.pendingAsyncCount === 0 &&\n      this.processing.every(isPersistent) &&\n      this.pending.every(isPersistent) &&\n      this.delayed.every(isPersistent)\n    );\n  }\n\n  private readonly tracer: Tracer;\n  public constructor(\n    public readonly platform: Platform,\n    private readonly $request: () => void,\n    private readonly $cancel: () => void,\n  ) {\n    this.tracer = new Tracer(platform.console);\n  }\n\n  public flush(time: number = this.platform.performanceNow()): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'flush'); }\n\n    this.flushRequested = false;\n    this.lastFlush = time;\n\n    // Only process normally if we are *not* currently waiting for an async task to finish\n    if (this.suspenderTask === void 0) {\n      if (this.pending.length > 0) {\n        this.processing.push(...this.pending);\n        this.pending.length = 0;\n      }\n      if (this.delayed.length > 0) {\n        let i = -1;\n        while (++i < this.delayed.length && this.delayed[i].queueTime <= time) { /* do nothing */ }\n        this.processing.push(...this.delayed.splice(0, i));\n      }\n\n      let cur: Task;\n      while (this.processing.length > 0) {\n        (cur = this.processing.shift()!).run();\n        // If it's still running, it can only be an async task\n        if (cur.status === TaskStatus.running) {\n          if (cur.suspend === true) {\n            this.suspenderTask = cur;\n            this.requestFlush();\n\n            if (this.tracer.enabled) { this.tracer.leave(this, 'flush early async'); }\n\n            return;\n          } else {\n            ++this.pendingAsyncCount;\n          }\n        }\n      }\n\n      if (this.pending.length > 0) {\n        this.processing.push(...this.pending);\n        this.pending.length = 0;\n      }\n      if (this.delayed.length > 0) {\n        let i = -1;\n        while (++i < this.delayed.length && this.delayed[i].queueTime <= time) { /* do nothing */ }\n        this.processing.push(...this.delayed.splice(0, i));\n      }\n\n      if (this.processing.length > 0 || this.delayed.length > 0 || this.pendingAsyncCount > 0) {\n        this.requestFlush();\n      }\n\n      if (\n        this.yieldPromise !== void 0 &&\n        this.hasNoMoreFiniteWork\n      ) {\n        const p = this.yieldPromise;\n        this.yieldPromise = void 0;\n        p.resolve();\n      }\n    } else {\n      // If we are still waiting for an async task to finish, just schedule the next flush and do nothing else.\n      // Should the task finish before the next flush is invoked,\n      // the callback to `completeAsyncTask` will have reset `this.suspenderTask` back to undefined so processing can return back to normal next flush.\n      this.requestFlush();\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'flush full'); }\n  }\n\n  /**\n   * Cancel the next flush cycle (and/or the macrotask that schedules the next flush cycle, in case this is a microtask queue), if it was requested.\n   *\n   * This operation is idempotent and will do nothing if no flush is scheduled.\n   */\n  public cancel(): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'cancel'); }\n\n    if (this.flushRequested) {\n      this.$cancel();\n      this.flushRequested = false;\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'cancel'); }\n  }\n\n  /**\n   * Returns a promise that, when awaited, resolves when:\n   * - all *non*-persistent (including async) tasks have finished;\n   * - the last-added persistent task has run exactly once;\n   *\n   * This operation is idempotent: the same promise will be returned until it resolves.\n   *\n   * If `yield()` is called multiple times in a row when there are one or more persistent tasks in the queue, each call will await exactly one cycle of those tasks.\n   */\n  public async yield(): Promise<void> {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'yield'); }\n\n    if (this.isEmpty) {\n      if (this.tracer.enabled) { this.tracer.leave(this, 'yield empty'); }\n    } else {\n      if (this.yieldPromise === void 0) {\n        if (this.tracer.enabled) { this.tracer.trace(this, 'yield - creating promise'); }\n        this.yieldPromise = createExposedPromise();\n      }\n\n      await this.yieldPromise;\n\n      if (this.tracer.enabled) { this.tracer.leave(this, 'yield task'); }\n    }\n  }\n\n  public queueTask<T = any>(callback: TaskCallback<T>, opts?: QueueTaskOptions): Task<T> {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'queueTask'); }\n\n    const { delay, preempt, persistent, reusable, suspend } = { ...defaultQueueTaskOptions, ...opts };\n\n    if (preempt) {\n      if (delay > 0) {\n        throw new Error(`Invalid arguments: preempt cannot be combined with a greater-than-zero delay`);\n      }\n      if (persistent) {\n        throw new Error(`Invalid arguments: preempt cannot be combined with persistent`);\n      }\n    }\n\n    if (this.processing.length === 0) {\n      this.requestFlush();\n    }\n\n    const time = this.platform.performanceNow();\n\n    let task: Task<T>;\n    if (reusable) {\n      const taskPool = this.taskPool;\n      const index = this.taskPoolSize - 1;\n      if (index >= 0) {\n        task = taskPool[index];\n        taskPool[index] = (void 0)!;\n        this.taskPoolSize = index;\n\n        task.reuse(time, delay, preempt, persistent, suspend, callback);\n      } else {\n        task = new Task(this.tracer, this, time, time + delay, preempt, persistent, suspend, reusable, callback);\n      }\n    } else {\n      task = new Task(this.tracer, this, time, time + delay, preempt, persistent, suspend, reusable, callback);\n    }\n\n    if (preempt) {\n      this.processing[this.processing.length] = task;\n    } else if (delay === 0) {\n      this.pending[this.pending.length] = task;\n    } else {\n      this.delayed[this.delayed.length] = task;\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'queueTask'); }\n\n    return task;\n  }\n\n  /**\n   * Remove the task from this queue.\n   */\n  public remove<T = any>(task: Task<T>): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'remove'); }\n\n    let idx = this.processing.indexOf(task);\n    if (idx > -1) {\n      this.processing.splice(idx, 1);\n      if (this.tracer.enabled) { this.tracer.leave(this, 'remove processing'); }\n      return;\n    }\n    idx = this.pending.indexOf(task);\n    if (idx > -1) {\n      this.pending.splice(idx, 1);\n      if (this.tracer.enabled) { this.tracer.leave(this, 'remove pending'); }\n      return;\n    }\n    idx = this.delayed.indexOf(task);\n    if (idx > -1) {\n      this.delayed.splice(idx, 1);\n      if (this.tracer.enabled) { this.tracer.leave(this, 'remove delayed'); }\n      return;\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'remove error'); }\n\n    throw new Error(`Task #${task.id} could not be found`);\n  }\n\n  /**\n   * Return a reusable task to the shared task pool.\n   * The next queued callback will reuse this task object instead of creating a new one, to save overhead of creating additional objects.\n   */\n  private returnToPool(task: Task): void {\n    if (this.tracer.enabled) { this.tracer.trace(this, 'returnToPool'); }\n\n    this.taskPool[this.taskPoolSize++] = task;\n  }\n\n  /**\n   * Reset the persistent task back to its pending state, preparing it for being invoked again on the next flush.\n   */\n  private resetPersistentTask(task: Task): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'resetPersistentTask'); }\n\n    task.reset(this.platform.performanceNow());\n\n    if (task.createdTime === task.queueTime) {\n      this.pending[this.pending.length] = task;\n    } else {\n      this.delayed[this.delayed.length] = task;\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'resetPersistentTask'); }\n  }\n\n  /**\n   * Notify the queue that this async task has had its promise resolved, so that the queue can proceed with consecutive tasks on the next flush.\n   */\n  private completeAsyncTask(task: Task): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'completeAsyncTask'); }\n\n    if (task.suspend === true) {\n      if (this.suspenderTask !== task) {\n        if (this.tracer.enabled) { this.tracer.leave(this, 'completeAsyncTask error'); }\n\n        throw new Error(`Async task completion mismatch: suspenderTask=${this.suspenderTask?.id}, task=${task.id}`);\n      }\n\n      this.suspenderTask = void 0;\n    } else {\n      --this.pendingAsyncCount;\n    }\n\n    if (\n      this.yieldPromise !== void 0 &&\n      this.hasNoMoreFiniteWork\n    ) {\n      const p = this.yieldPromise;\n      this.yieldPromise = void 0;\n      p.resolve();\n    }\n\n    if (this.isEmpty) {\n      this.cancel();\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'completeAsyncTask'); }\n  }\n\n  private readonly requestFlush: () => void = () => {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'requestFlush'); }\n\n    if (!this.flushRequested) {\n      this.flushRequested = true;\n      this.lastRequest = this.platform.performanceNow();\n      this.$request();\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'requestFlush'); }\n  };\n}\n\nexport class TaskAbortError<T = any> extends Error {\n  public constructor(public task: Task<T>) {\n    super('Task was canceled.');\n  }\n}\n\nlet id: number = 0;\n\nexport const enum TaskStatus {\n  pending = 0,\n  running = 1,\n  completed = 2,\n  canceled = 3,\n}\n\ntype UnwrapPromise<T> = T extends Promise<infer R> ? R : T;\n\nexport interface ITask<T = any> {\n  readonly result: Promise<UnwrapPromise<T>>;\n  readonly status: TaskStatus;\n  run(): void;\n  cancel(): boolean;\n}\n\nexport class Task<T = any> implements ITask {\n  public readonly id: number = ++id;\n\n  private resolve: PResolve<UnwrapPromise<T>> | undefined = void 0;\n  private reject: PReject<TaskAbortError<T>> | undefined = void 0;\n\n  private _result: Promise<UnwrapPromise<T>> | undefined = void 0;\n  public get result(): Promise<UnwrapPromise<T>> {\n    const result = this._result;\n    if (result === void 0) {\n      switch (this._status) {\n        case TaskStatus.pending: {\n          const promise = this._result = createExposedPromise();\n          this.resolve = promise.resolve;\n          this.reject = promise.reject;\n          return promise;\n        }\n        case TaskStatus.running:\n          throw new Error('Trying to await task from within task will cause a deadlock.');\n        case TaskStatus.completed:\n          return this._result = Promise.resolve() as unknown as Promise<UnwrapPromise<T>>;\n        case TaskStatus.canceled:\n          return this._result = Promise.reject(new TaskAbortError(this));\n      }\n    }\n    return result!;\n  }\n\n  private _status: TaskStatus = TaskStatus.pending;\n  public get status(): TaskStatus {\n    return this._status;\n  }\n\n  public constructor(\n    private readonly tracer: Tracer,\n    public readonly taskQueue: TaskQueue,\n    public createdTime: number,\n    public queueTime: number,\n    public preempt: boolean,\n    public persistent: boolean,\n    public suspend: boolean,\n    public readonly reusable: boolean,\n    public callback: TaskCallback<T>,\n  ) {}\n\n  public run(time: number = this.taskQueue.platform.performanceNow()): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'run'); }\n\n    if (this._status !== TaskStatus.pending) {\n      if (this.tracer.enabled) { this.tracer.leave(this, 'run error'); }\n\n      throw new Error(`Cannot run task in ${this._status} state`);\n    }\n\n    // this.persistent could be changed while the task is running (this can only be done by the task itself if canceled, and is a valid way of stopping a loop)\n    // so we deliberately reference this.persistent instead of the local variable, but we keep it around to know whether the task *was* persistent before running it,\n    // so we can set the correct cancelation state.\n    const {\n      persistent,\n      reusable,\n      taskQueue,\n      callback,\n      resolve,\n      reject,\n      createdTime,\n    } = this;\n\n    this._status = TaskStatus.running;\n\n    try {\n      const ret = callback(time - createdTime);\n      if (ret instanceof Promise) {\n        ret.then($ret => {\n            if (this.persistent) {\n              taskQueue['resetPersistentTask'](this);\n            } else {\n              if (persistent) {\n                // Persistent tasks never reach completed status. They're either pending, running, or canceled.\n                this._status = TaskStatus.canceled;\n              } else {\n                this._status = TaskStatus.completed;\n              }\n\n              this.dispose();\n            }\n\n            taskQueue['completeAsyncTask'](this);\n\n            if (this.tracer.enabled) { this.tracer.leave(this, 'run async then'); }\n\n            if (resolve !== void 0) {\n              resolve($ret as UnwrapPromise<T>);\n            }\n\n            if (!this.persistent && reusable) {\n              taskQueue['returnToPool'](this);\n            }\n          })\n          .catch(err => {\n            if (!this.persistent) {\n              this.dispose();\n            }\n\n            taskQueue['completeAsyncTask'](this);\n\n            if (this.tracer.enabled) { this.tracer.leave(this, 'run async catch'); }\n\n            if (reject !== void 0) {\n              reject(err);\n            } else {\n              throw err;\n            }\n          });\n      } else {\n        if (this.persistent) {\n          taskQueue['resetPersistentTask'](this);\n        } else {\n          if (persistent) {\n            // Persistent tasks never reach completed status. They're either pending, running, or canceled.\n            this._status = TaskStatus.canceled;\n          } else {\n            this._status = TaskStatus.completed;\n          }\n\n          this.dispose();\n        }\n\n        if (this.tracer.enabled) { this.tracer.leave(this, 'run sync success'); }\n\n        if (resolve !== void 0) {\n          resolve(ret as UnwrapPromise<T>);\n        }\n\n        if (!this.persistent && reusable) {\n          taskQueue['returnToPool'](this);\n        }\n      }\n    } catch (err) {\n      if (!this.persistent) {\n        this.dispose();\n      }\n\n      if (this.tracer.enabled) { this.tracer.leave(this, 'run sync error'); }\n\n      if (reject !== void 0) {\n        reject(err);\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  public cancel(): boolean {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'cancel'); }\n\n    if (this._status === TaskStatus.pending) {\n      const taskQueue = this.taskQueue;\n      const reusable = this.reusable;\n      const reject = this.reject;\n\n      taskQueue.remove(this);\n\n      if (taskQueue.isEmpty) {\n        taskQueue.cancel();\n      }\n\n      this._status = TaskStatus.canceled;\n\n      this.dispose();\n\n      if (reusable) {\n        taskQueue['returnToPool'](this);\n      }\n\n      if (reject !== void 0) {\n        reject(new TaskAbortError(this));\n      }\n\n      if (this.tracer.enabled) { this.tracer.leave(this, 'cancel true =pending'); }\n\n      return true;\n    } else if (this._status === TaskStatus.running && this.persistent) {\n      this.persistent = false;\n\n      if (this.tracer.enabled) { this.tracer.leave(this, 'cancel true =running+persistent'); }\n\n      return true;\n    }\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'cancel false'); }\n\n    return false;\n  }\n\n  public reset(time: number): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'reset'); }\n\n    const delay = this.queueTime - this.createdTime;\n    this.createdTime = time;\n    this.queueTime = time + delay;\n    this._status = TaskStatus.pending;\n\n    this.resolve = void 0;\n    this.reject = void 0;\n    this._result = void 0;\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'reset'); }\n  }\n\n  public reuse(\n    time: number,\n    delay: number,\n    preempt: boolean,\n    persistent: boolean,\n    suspend: boolean,\n    callback: TaskCallback<T>,\n  ): void {\n    if (this.tracer.enabled) { this.tracer.enter(this, 'reuse'); }\n\n    this.createdTime = time;\n    this.queueTime = time + delay;\n    this.preempt = preempt;\n    this.persistent = persistent;\n    this.suspend = suspend;\n    this.callback = callback;\n    this._status = TaskStatus.pending;\n\n    if (this.tracer.enabled) { this.tracer.leave(this, 'reuse'); }\n  }\n\n  public dispose(): void {\n    if (this.tracer.enabled) { this.tracer.trace(this, 'dispose'); }\n\n    this.callback = (void 0)!;\n    this.resolve = void 0;\n    this.reject = void 0;\n    this._result = void 0;\n  }\n}\n\nfunction taskStatus(status: TaskStatus): 'pending' | 'running' | 'canceled' | 'completed' {\n  switch (status) {\n    case TaskStatus.pending: return 'pending';\n    case TaskStatus.running: return 'running';\n    case TaskStatus.canceled: return 'canceled';\n    case TaskStatus.completed: return 'completed';\n  }\n}\n\nclass Tracer {\n  public enabled: boolean = false;\n  private depth: number = 0;\n  public constructor(private readonly console: Platform['console']) {}\n\n  public enter(obj: TaskQueue | Task, method: string): void {\n    this.log(`${'  '.repeat(this.depth++)}> `, obj, method);\n  }\n  public leave(obj: TaskQueue | Task, method: string): void {\n    this.log(`${'  '.repeat(--this.depth)}< `, obj, method);\n  }\n  public trace(obj: TaskQueue | Task, method: string): void {\n    this.log(`${'  '.repeat(this.depth)}- `, obj, method);\n  }\n\n  private log(prefix: string, obj: TaskQueue | Task, method: string): void {\n    if (obj instanceof TaskQueue) {\n      const processing = obj['processing'].length;\n      const pending = obj['pending'].length;\n      const delayed = obj['delayed'].length;\n      const flushReq = obj['flushRequested'];\n      const susTask = !!obj['suspenderTask'];\n\n      const info = `processing=${processing} pending=${pending} delayed=${delayed} flushReq=${flushReq} susTask=${susTask}`;\n      this.console.log(`${prefix}[Q.${method}] ${info}`);\n    } else {\n      const id = obj['id'];\n      const created = Math.round(obj['createdTime'] * 10) / 10;\n      const queue = Math.round(obj['queueTime'] * 10) / 10;\n      const preempt = obj['preempt'];\n      const reusable = obj['reusable'];\n      const persistent = obj['persistent'];\n      const suspend = obj['suspend'];\n      const status = taskStatus(obj['_status']);\n\n      const info = `id=${id} created=${created} queue=${queue} preempt=${preempt} persistent=${persistent} reusable=${reusable} status=${status} suspend=${suspend}`;\n      this.console.log(`${prefix}[T.${method}] ${info}`);\n    }\n  }\n}\nexport const enum TaskQueuePriority {\n  render     = 0,\n  macroTask  = 1,\n  postRender = 2,\n}\n\nexport type QueueTaskOptions = {\n  /**\n   * The number of milliseconds to wait before queueing the task.\n   *\n   * NOTE: just like `setTimeout`, there is no guarantee that the task will actually run\n   * after the specified delay. It is merely a *minimum* delay.\n   *\n   * Defaults to `0`\n   */\n  delay?: number;\n  /**\n   * If `true`, the task will be run synchronously if it is the same priority as the\n   * `TaskQueue` that is currently flushing. Otherwise, it will be run on the next tick.\n   *\n   * Defaults to `false`\n   */\n  preempt?: boolean;\n  /**\n   * If `true`, the task will be added back onto the queue after it finished running, indefinitely, until manually canceled.\n   *\n   * Defaults to `false`\n   */\n  persistent?: boolean;\n  /**\n   * If `true`, the task will be kept in-memory after finishing, so that it can be reused for future tasks for efficiency.\n   *\n   * Defaults to `true`\n   */\n  reusable?: boolean;\n  /**\n   * If `true`, and the task callback returns a promise, that promise will be awaited before consecutive tasks are run.\n   *\n   * Defaults to `false`.\n   */\n  suspend?: boolean;\n};\n\nconst defaultQueueTaskOptions: Required<QueueTaskOptions> = {\n  delay: 0,\n  preempt: false,\n  persistent: false,\n  reusable: true,\n  suspend: false,\n};\n\ntype PResolve<T> = (value: T | PromiseLike<T>) => void;\ntype PReject<T = any> = (reason?: T) => void;\nlet $resolve: PResolve<any>;\nlet $reject: PReject;\nfunction executor<T>(resolve: PResolve<T>, reject: PReject): void {\n  $resolve = resolve;\n  $reject = reject;\n}\n\ntype ExposedPromise<T = void> = Promise<T> & {\n  resolve: PResolve<T>;\n  reject: PReject;\n};\n\n/**\n * Efficiently create a promise where the `resolve` and `reject` functions are stored as properties on the prommise itself.\n */\nfunction createExposedPromise<T>(): ExposedPromise<T> {\n  const p = new Promise<T>(executor) as ExposedPromise<T>;\n  p.resolve = $resolve;\n  p.reject = $reject;\n  return p;\n}\n"],"names":["TaskStatus","TaskQueuePriority"],"mappings":"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"}