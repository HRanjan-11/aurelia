{"version":3,"file":"index.esm.js","sources":["../../src/util.ts","../../src/retry-interceptor.ts","../../src/http-client-configuration.ts","../../src/http-client.ts"],"sourcesContent":["/**\n * Serialize an object to JSON. Useful for easily creating JSON fetch request bodies.\n *\n * @param body - The object to be serialized to JSON.\n * @param replacer - The JSON.stringify replacer used when serializing.\n * @returns A JSON string.\n */\nexport function json(body: unknown, replacer?: (key: string, value: unknown) => unknown): string {\n  return JSON.stringify((body !== undefined ? body : {}), replacer);\n}\n","import { HttpClient } from './http-client.js';\nimport { Interceptor, RetryableRequest, RetryConfiguration } from './interfaces.js';\n\nexport const retryStrategy: {\n  fixed: 0;\n  incremental: 1;\n  exponential: 2;\n  random: 3;\n} = {\n  fixed: 0,\n  incremental: 1,\n  exponential: 2,\n  random: 3\n};\n\nconst defaultRetryConfig: RetryConfiguration = {\n  maxRetries: 3,\n  interval: 1000,\n  strategy: retryStrategy.fixed\n};\n\n/**\n * Interceptor that retries requests on error, based on a given RetryConfiguration.\n */\nexport class RetryInterceptor implements Interceptor {\n  public retryConfig: RetryConfiguration;\n\n  /**\n   * Creates an instance of RetryInterceptor.\n   */\n  public constructor(retryConfig?: RetryConfiguration) {\n    this.retryConfig = {...defaultRetryConfig, ...(retryConfig !== undefined ? retryConfig : {})};\n\n    if (this.retryConfig.strategy === retryStrategy.exponential &&\n      (this.retryConfig.interval as number) <= 1000) {\n      throw new Error('An interval less than or equal to 1 second is not allowed when using the exponential retry strategy');\n    }\n  }\n\n  /**\n   * Called with the request before it is sent. It remembers the request so it can be retried on error.\n   *\n   * @param request - The request to be sent.\n   * @returns The existing request, a new request or a response; or a Promise for any of these.\n   */\n  public request(request: RetryableRequest): RetryableRequest {\n    if (!request.retryConfig) {\n      request.retryConfig = {...this.retryConfig};\n      request.retryConfig.counter = 0;\n    }\n\n    // do this on every request\n    request.retryConfig.requestClone = request.clone();\n\n    return request;\n  }\n\n  /**\n   * Called with the response after it is received. Clears the remembered request, as it was succesfull.\n   *\n   * @param response - The response.\n   * @returns The response; or a Promise for one.\n   */\n  public response(response: Response, request: RetryableRequest): Response {\n    // retry was successful, so clean up after ourselves\n    Reflect.deleteProperty(request, 'retryConfig');\n    return response;\n  }\n\n  /**\n   * Handles fetch errors and errors generated by previous interceptors. This\n   * function acts as a Promise rejection handler. It wil retry the remembered request based on the\n   * configured RetryConfiguration.\n   *\n   * @param error - The rejection value from the fetch request or from a\n   * previous interceptor.\n   * @returns The response of the retry; or a Promise for one.\n   */\n\n  public responseError(error: Response, request: RetryableRequest, httpClient: HttpClient): Response | Promise<Response> {\n    const { retryConfig } = request as { retryConfig: Required<RetryConfiguration> };\n    const { requestClone } = retryConfig;\n    return Promise.resolve().then(() => {\n      if (retryConfig.counter < retryConfig.maxRetries) {\n        const result = retryConfig.doRetry !== undefined ? retryConfig.doRetry(error, request) : true;\n\n        return Promise.resolve(result).then(doRetry => {\n          if (doRetry) {\n            retryConfig.counter++;\n            const delay = calculateDelay(retryConfig);\n            return new Promise(resolve => setTimeout(resolve, !isNaN(delay) ? delay : 0))\n              .then(() => {\n                const newRequest = requestClone.clone();\n                if (typeof (retryConfig.beforeRetry) === 'function') {\n                  return retryConfig.beforeRetry(newRequest, httpClient);\n                }\n                return newRequest;\n              })\n              .then(newRequest => {\n                const retryableRequest: RetryableRequest = {...newRequest, retryConfig};\n                return httpClient.fetch(retryableRequest);\n              });\n          }\n\n          // no more retries, so clean up\n          Reflect.deleteProperty(request, 'retryConfig');\n          throw error;\n        });\n      }\n      // no more retries, so clean up\n      Reflect.deleteProperty(request, 'retryConfig');\n      throw error;\n    });\n  }\n}\n\nfunction calculateDelay(retryConfig: RetryConfiguration): number {\n  const { interval, strategy, minRandomInterval, maxRandomInterval, counter } = retryConfig as Required<RetryConfiguration>;\n\n  if (typeof (strategy) === 'function') {\n    return (retryConfig.strategy as (retryCount: number) => number)(counter);\n  }\n\n  switch (strategy) {\n    case (retryStrategy.fixed):\n      return retryStrategies[retryStrategy.fixed](interval);\n    case (retryStrategy.incremental):\n      return retryStrategies[retryStrategy.incremental](counter, interval);\n    case (retryStrategy.exponential):\n      return retryStrategies[retryStrategy.exponential](counter, interval);\n    case (retryStrategy.random):\n      return retryStrategies[retryStrategy.random](counter, interval, minRandomInterval, maxRandomInterval);\n    default:\n      throw new Error('Unrecognized retry strategy');\n  }\n}\n\nconst retryStrategies = [\n  // fixed\n  interval => interval,\n\n  // incremental\n  (retryCount, interval) => interval * retryCount,\n\n  // exponential\n  (retryCount, interval) => retryCount === 1 ? interval : interval ** retryCount / 1000,\n\n  // random\n  (retryCount, interval, minRandomInterval = 0, maxRandomInterval = 60000) => {\n    return Math.random() * (maxRandomInterval - minRandomInterval) + minRandomInterval;\n  }\n] as [\n  (interval: number) => number,\n  (retryCount: number, interval: number) => number,\n  (retryCount: number, interval: number) => number,\n  (retryCount: number, interval: number, minRandomInterval?: number, maxRandomInterval?: number) => number\n];\n","import { Interceptor, RetryConfiguration } from './interfaces.js';\nimport { RetryInterceptor } from './retry-interceptor.js';\n\n/**\n * A class for configuring HttpClients.\n */\nexport class HttpClientConfiguration {\n  /**\n   * The base URL to be prepended to each Request's url before sending.\n   */\n  public baseUrl: string = '';\n\n  /**\n   * Default values to apply to init objects when creating Requests. Note that\n   * defaults cannot be applied when Request objects are manually created because\n   * Request provides its own defaults and discards the original init object.\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n   */\n  public defaults: RequestInit = {};\n\n  /**\n   * Interceptors to be added to the HttpClient.\n   */\n  public interceptors: Interceptor[] = [];\n\n  public dispatcher: Node | null = null;\n\n  /**\n   * Sets the baseUrl.\n   *\n   * @param baseUrl - The base URL.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withBaseUrl(baseUrl: string): HttpClientConfiguration {\n    this.baseUrl = baseUrl;\n    return this;\n  }\n\n  /**\n   * Sets the defaults.\n   *\n   * @param defaults - The defaults.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withDefaults(defaults: RequestInit): HttpClientConfiguration {\n    this.defaults = defaults;\n    return this;\n  }\n\n  /**\n   * Adds an interceptor to be run on all requests or responses.\n   *\n   * @param interceptor - An object with request, requestError,\n   * response, or responseError methods. request and requestError act as\n   * resolve and reject handlers for the Request before it is sent.\n   * response and responseError act as resolve and reject handlers for\n   * the Response after it has been received.\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public withInterceptor(interceptor: Interceptor): HttpClientConfiguration {\n    this.interceptors.push(interceptor);\n    return this;\n  }\n\n  /**\n   * Applies a configuration that addresses common application needs, including\n   * configuring same-origin credentials, and using rejectErrorResponses.\n   *\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public useStandardConfiguration(): HttpClientConfiguration {\n    const standardConfig = { credentials: 'same-origin' };\n    Object.assign(this.defaults, standardConfig, this.defaults);\n    return this.rejectErrorResponses();\n  }\n\n  /**\n   * Causes Responses whose status codes fall outside the range 200-299 to reject.\n   * The fetch API only rejects on network errors or other conditions that prevent\n   * the request from completing, meaning consumers must inspect Response.ok in the\n   * Promise continuation to determine if the server responded with a success code.\n   * This method adds a response interceptor that causes Responses with error codes\n   * to be rejected, which is common behavior in HTTP client libraries.\n   *\n   * @returns The chainable instance of this configuration object.\n   * @chainable\n   */\n  public rejectErrorResponses(): HttpClientConfiguration {\n    return this.withInterceptor({ response: rejectOnError });\n  }\n\n  public withRetry(config?: RetryConfiguration): HttpClientConfiguration {\n    const interceptor: Interceptor = new RetryInterceptor(config);\n\n    return this.withInterceptor(interceptor);\n  }\n\n  public withDispatcher(dispatcher: Node): HttpClientConfiguration {\n    this.dispatcher = dispatcher;\n    return this;\n  }\n}\n\nfunction rejectOnError(response: Response): Response {\n  if (!response.ok) {\n    throw response;\n  }\n\n  return response;\n}\n","import { DI, IIndexable } from '@aurelia/kernel';\nimport { HttpClientConfiguration } from './http-client-configuration.js';\nimport { Interceptor, ValidInterceptorMethodName } from './interfaces.js';\nimport { RetryInterceptor } from './retry-interceptor.js';\n\nconst absoluteUrlRegexp = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n\nexport const IHttpClient = DI.createInterface<IHttpClient>('IHttpClient', x => x.singleton(HttpClient));\nexport interface IHttpClient extends HttpClient {}\n/**\n * An HTTP client based on the Fetch API.\n */\nexport class HttpClient {\n  /**\n   * The current number of active requests.\n   * Requests being processed by interceptors are considered active.\n   */\n  public activeRequestCount: number;\n\n  /**\n   * Indicates whether or not the client is currently making one or more requests.\n   */\n  public isRequesting: boolean;\n\n  /**\n   * Indicates whether or not the client has been configured.\n   */\n  public isConfigured: boolean;\n\n  /**\n   * The base URL set by the config.\n   */\n  public baseUrl: string;\n\n  /**\n   * The default request init to merge with values specified at request time.\n   */\n  public defaults: RequestInit | null;\n\n  /**\n   * The interceptors to be run during requests.\n   */\n  public interceptors: Interceptor[];\n\n  public dispatcher: Node | null = null;\n\n  /**\n   * Creates an instance of HttpClient.\n   */\n  public constructor() {\n    this.activeRequestCount = 0;\n    this.isRequesting = false;\n    this.isConfigured = false;\n    this.baseUrl = '';\n    this.defaults = null;\n    this.interceptors = [];\n  }\n\n  /**\n   * Configure this client with default settings to be used by all requests.\n   *\n   * @param config - A configuration object, or a function that takes a config\n   * object and configures it.\n   * @returns The chainable instance of this HttpClient.\n   * @chainable\n   */\n  public configure(config: RequestInit | ((config: HttpClientConfiguration) => HttpClientConfiguration) | HttpClientConfiguration): HttpClient {\n\n    let normalizedConfig: HttpClientConfiguration;\n\n    if (typeof config === 'object') {\n      const requestInitConfiguration = { defaults: config as RequestInit };\n      normalizedConfig = requestInitConfiguration as HttpClientConfiguration;\n    } else if (typeof config === 'function') {\n      normalizedConfig = new HttpClientConfiguration();\n      normalizedConfig.baseUrl = this.baseUrl;\n      normalizedConfig.defaults = { ...this.defaults };\n      normalizedConfig.interceptors = this.interceptors;\n      normalizedConfig.dispatcher = this.dispatcher;\n\n      const c = config(normalizedConfig);\n      if (Object.prototype.isPrototypeOf.call(HttpClientConfiguration.prototype, c)) {\n        normalizedConfig = c;\n      }\n    } else {\n      throw new Error('invalid config');\n    }\n\n    const defaults = normalizedConfig.defaults;\n    if (defaults !== undefined && Object.prototype.isPrototypeOf.call(Headers.prototype, defaults.headers as HeadersInit)) {\n      // Headers instances are not iterable in all browsers. Require a plain\n      // object here to allow default headers to be merged into request headers.\n      throw new Error('Default headers must be a plain object.');\n    }\n\n    const interceptors = normalizedConfig.interceptors;\n\n    if (interceptors !== undefined && interceptors.length) {\n      // find if there is a RetryInterceptor\n      if (interceptors.filter(x => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, x)).length > 1) {\n        throw new Error('Only one RetryInterceptor is allowed.');\n      }\n\n      const retryInterceptorIndex = interceptors.findIndex(x => Object.prototype.isPrototypeOf.call(RetryInterceptor.prototype, x));\n\n      if (retryInterceptorIndex >= 0 && retryInterceptorIndex !== interceptors.length - 1) {\n        throw new Error('The retry interceptor must be the last interceptor defined.');\n      }\n    }\n\n    this.baseUrl = normalizedConfig.baseUrl;\n    this.defaults = defaults;\n    this.interceptors = normalizedConfig.interceptors !== undefined ? normalizedConfig.interceptors : [];\n    this.dispatcher = normalizedConfig.dispatcher;\n    this.isConfigured = true;\n\n    return this;\n  }\n\n  /**\n   * Starts the process of fetching a resource. Default configuration parameters\n   * will be applied to the Request. The constructed Request will be passed to\n   * registered request interceptors before being sent. The Response will be passed\n   * to registered Response interceptors before it is returned.\n   *\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public fetch(input: Request | string, init?: RequestInit): Promise<Response> {\n    this.trackRequestStart();\n\n    let request = this.buildRequest(input, init);\n    return this.processRequest(request, this.interceptors).then(result => {\n      let response: Promise<Response>;\n\n      if (Object.prototype.isPrototypeOf.call(Response.prototype, result)) {\n        response = Promise.resolve(result as Response);\n      } else if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {\n        request = result as Request;\n        response = fetch(request);\n      } else {\n        throw new Error(`An invalid result was returned by the interceptor chain. Expected a Request or Response instance, but got [${result}]`);\n      }\n\n      return this.processResponse(response, this.interceptors, request);\n    })\n      .then(result => {\n        if (Object.prototype.isPrototypeOf.call(Request.prototype, result)) {\n          return this.fetch(result as Request);\n        }\n        return result as Response;\n      })\n      .then(\n        result => {\n          this.trackRequestEnd();\n          return result;\n        },\n        error => {\n          this.trackRequestEnd();\n          throw error;\n        }\n      );\n  }\n\n  public buildRequest(input: string | Request, init: RequestInit | undefined): Request {\n    const defaults = this.defaults !== null ? this.defaults : {};\n    let request: Request;\n    let body: unknown;\n    let requestContentType: string | null;\n\n    const parsedDefaultHeaders = parseHeaderValues(defaults.headers as IIndexable);\n    if (Object.prototype.isPrototypeOf.call(Request.prototype, input)) {\n      request = input as Request;\n      requestContentType = new Headers(request.headers).get('Content-Type');\n    } else {\n      if (!init) {\n        init = {};\n      }\n      body = init.body;\n      const bodyObj = body !== undefined ? { body: body as BodyInit } : null;\n      const requestInit: RequestInit = { ...defaults, headers: {}, ...init, ...bodyObj };\n      requestContentType = new Headers(requestInit.headers as Headers).get('Content-Type');\n      request = new Request(getRequestUrl(this.baseUrl, input as string), requestInit);\n    }\n    if (!requestContentType) {\n      if (new Headers(parsedDefaultHeaders).has('content-type')) {\n        request.headers.set('Content-Type', new Headers(parsedDefaultHeaders).get('content-type') as string);\n      } else if (body !== undefined && isJSON(body)) {\n        request.headers.set('Content-Type', 'application/json');\n      }\n    }\n    setDefaultHeaders(request.headers, parsedDefaultHeaders);\n    if (body !== undefined && Object.prototype.isPrototypeOf.call(Blob.prototype, body as Blob) && (body as Blob).type) {\n      // work around bug in IE & Edge where the Blob type is ignored in the request\n      // https://connect.microsoft.com/IE/feedback/details/2136163\n      request.headers.set('Content-Type', (body as Blob).type);\n    }\n    return request;\n  }\n\n  /**\n   * Calls fetch as a GET request.\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public get(input: Request | string, init?: RequestInit): Promise<Response> {\n    return this.fetch(input, init);\n  }\n\n  /**\n   * Calls fetch with request method set to POST.\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body - The body of the request.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public post(input: Request | string, body?: BodyInit, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'POST');\n  }\n\n  /**\n   * Calls fetch with request method set to PUT.\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body - The body of the request.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public put(input: Request | string, body?: BodyInit, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'PUT');\n  }\n\n  /**\n   * Calls fetch with request method set to PATCH.\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body - The body of the request.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public patch(input: Request | string, body?: BodyInit, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'PATCH');\n  }\n\n  /**\n   * Calls fetch with request method set to DELETE.\n   *\n   * @param input - The resource that you wish to fetch. Either a\n   * Request object, or a string containing the URL of the resource.\n   * @param body - The body of the request.\n   * @param init - An options object containing settings to be applied to\n   * the Request.\n   * @returns A Promise for the Response from the fetch request.\n   */\n  public delete(input: Request | string, body?: BodyInit, init?: RequestInit): Promise<Response> {\n    return this.callFetch(input, body, init, 'DELETE');\n  }\n\n  private trackRequestStart(): void {\n    this.isRequesting = !!(++this.activeRequestCount);\n    if (this.isRequesting && this.dispatcher !== null) {\n      const evt = new this.dispatcher.ownerDocument!.defaultView!.CustomEvent('aurelia-fetch-client-request-started', { bubbles: true, cancelable: true });\n      setTimeout(() => { this.dispatcher!.dispatchEvent(evt); }, 1);\n    }\n  }\n\n  private trackRequestEnd(): void {\n    this.isRequesting = !!(--this.activeRequestCount);\n    if (!this.isRequesting && this.dispatcher !== null) {\n      const evt = new this.dispatcher.ownerDocument!.defaultView!.CustomEvent('aurelia-fetch-client-requests-drained', { bubbles: true, cancelable: true });\n      setTimeout(() => { this.dispatcher!.dispatchEvent(evt); }, 1);\n    }\n  }\n\n  private processRequest(request: Request, interceptors: Interceptor[]): Promise<Request | Response> {\n    return this.applyInterceptors(request, interceptors, 'request', 'requestError', this);\n  }\n\n  private processResponse(response: Promise<Response>, interceptors: Interceptor[], request: Request): Promise<Request | Response> {\n    return this.applyInterceptors(response, interceptors, 'response', 'responseError', request, this);\n  }\n\n  private applyInterceptors(input: Request | Promise<Response | Request>, interceptors: Interceptor[] | undefined, successName: ValidInterceptorMethodName, errorName: ValidInterceptorMethodName, ...interceptorArgs: unknown[]): Promise<Request | Response> {\n    return (interceptors !== undefined ? interceptors : [])\n      .reduce(\n        (chain, interceptor) => {\n          const successHandler = interceptor[successName];\n          const errorHandler = interceptor[errorName];\n\n          // TODO: Fix this, as it violates `strictBindCallApply`.\n          return chain.then(\n            successHandler ? (value => successHandler.call(interceptor, value, ...interceptorArgs)) : identity,\n            errorHandler ? (reason => errorHandler.call(interceptor, reason, ...interceptorArgs)) : thrower);\n        },\n        Promise.resolve(input)\n      );\n  }\n\n  private callFetch(input: string | Request, body: BodyInit | undefined, init: RequestInit | undefined, method: string): Promise<Response> {\n    if (!init) {\n      init = {};\n    }\n    init.method = method;\n    if (body) {\n      init.body = body;\n    }\n    return this.fetch(input, init);\n  }\n}\n\nfunction parseHeaderValues(headers: Record<string, unknown> | undefined): Record<string, string>  {\n  const parsedHeaders: Record<string, string> = {};\n  const $headers = headers !== undefined ? headers : {};\n  for (const name in $headers) {\n    if (Object.prototype.hasOwnProperty.call($headers, name)) {\n      parsedHeaders[name] = (typeof $headers[name] === 'function')\n        ? ($headers[name] as () => string)()\n        : $headers[name] as string;\n    }\n  }\n  return parsedHeaders;\n}\n\nfunction getRequestUrl(baseUrl: string, url: string): string {\n  if (absoluteUrlRegexp.test(url)) {\n    return url;\n  }\n\n  return (baseUrl !== undefined ? baseUrl : '') + url;\n}\n\nfunction setDefaultHeaders(headers: Headers, defaultHeaders?: Record<string, string>): void {\n  const $defaultHeaders = defaultHeaders !== undefined ? defaultHeaders : {};\n  for (const name in $defaultHeaders) {\n    if (Object.prototype.hasOwnProperty.call($defaultHeaders, name) && !headers.has(name)) {\n      headers.set(name, $defaultHeaders[name]);\n    }\n  }\n}\n\nfunction isJSON(str: unknown): boolean {\n  try {\n    JSON.parse(str as string);\n  } catch (err) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction identity(x: unknown): unknown {\n  return x;\n}\n\nfunction thrower(x: unknown): never {\n  throw x;\n}\n"],"names":[],"mappings":"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"}