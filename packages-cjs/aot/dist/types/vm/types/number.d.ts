import { $AnyNonError, PotentialNonEmptyCompletionType, CompletionTarget, $Any } from './_shared.js';
import { Realm, ExecutionContext } from '../realm.js';
import { $Object } from './object.js';
import { $String } from './string.js';
import { $Boolean } from './boolean.js';
import { $NumericLiteral } from '../ast/literals.js';
import { I$Node } from '../ast/_shared.js';
export declare class $Number<T extends number = number> {
    readonly realm: Realm;
    readonly sourceNode: $NumericLiteral | null;
    readonly conversionSource: $AnyNonError | null;
    readonly '<$Number>': unknown;
    readonly id: number;
    readonly IntrinsicName: 'number';
    '[[Type]]': PotentialNonEmptyCompletionType;
    readonly '[[Value]]': T;
    '[[Target]]': CompletionTarget;
    get isAbrupt(): false;
    get Type(): 'Number';
    get isNaN(): boolean;
    get isPositiveZero(): boolean;
    get isNegativeZero(): boolean;
    get isPositiveInfinity(): boolean;
    get isNegativeInfinity(): boolean;
    get isEmpty(): false;
    get isUndefined(): false;
    get isNull(): false;
    get isNil(): false;
    get isBoolean(): false;
    get isNumber(): true;
    get isString(): false;
    get isSymbol(): false;
    get isPrimitive(): true;
    get isObject(): false;
    get isArray(): false;
    get isProxy(): false;
    get isFunction(): false;
    get isBoundFunction(): false;
    get isTruthy(): boolean;
    get isFalsey(): boolean;
    get isSpeculative(): false;
    get hasValue(): true;
    get isList(): false;
    readonly nodeStack: I$Node[];
    ctx: ExecutionContext | null;
    stack: string;
    constructor(realm: Realm, value: T, type?: PotentialNonEmptyCompletionType, target?: CompletionTarget, sourceNode?: $NumericLiteral | null, conversionSource?: $AnyNonError | null);
    is(other: $AnyNonError): other is $Number<T>;
    enrichWith(ctx: ExecutionContext, node: I$Node): this;
    [Symbol.toPrimitive](): string;
    [Symbol.toStringTag](): string;
    ToCompletion(type: PotentialNonEmptyCompletionType, target: CompletionTarget): this;
    UpdateEmpty(value: $Any): this;
    equals(other: $Number): boolean;
    get IsInteger(): boolean;
    ToObject(ctx: ExecutionContext): $Object;
    ToPropertyKey(ctx: ExecutionContext): $String;
    ToPrimitive(ctx: ExecutionContext): this;
    ToBoolean(ctx: ExecutionContext): $Boolean;
    ToNumber(ctx: ExecutionContext): $Number;
    ToInteger(ctx: ExecutionContext): $Number;
    ToLength(ctx: ExecutionContext): $Number;
    ToInt32(ctx: ExecutionContext): $Number;
    ToUint32(ctx: ExecutionContext): $Number;
    ToInt16(ctx: ExecutionContext): $Number;
    ToUint16(ctx: ExecutionContext): $Number;
    ToInt8(ctx: ExecutionContext): $Number;
    ToUint8(ctx: ExecutionContext): $Number;
    ToUint8Clamp(ctx: ExecutionContext): $Number;
    ToString(ctx: ExecutionContext): $String;
    GetValue(ctx: ExecutionContext): this;
}
//# sourceMappingURL=number.d.ts.map