import { $AnyNonError } from './_shared.js';
import { Realm, ExecutionContext } from '../realm.js';
import { $Empty } from './empty.js';
import { $Error } from './error.js';
import { $$AssignmentExpressionOrHigher } from '../ast/_shared.js';
export declare class $SpeculativeValue {
    readonly realm: Realm;
    readonly sourceNode: $$AssignmentExpressionOrHigher;
    readonly antecedents: readonly $SpeculativeValue[];
    readonly '<$SpeculativeValue>': unknown;
    readonly path: string;
    readonly id: number;
    get Type(): $Error;
    get isEmpty(): false;
    get isUndefined(): false;
    get isNull(): false;
    get isNil(): false;
    get isBoolean(): false;
    get isNumber(): false;
    get isString(): false;
    get isSymbol(): false;
    get isPrimitive(): false;
    get isObject(): false;
    get isArray(): false;
    get isProxy(): false;
    get isFunction(): false;
    get isBoundFunction(): false;
    get isTruthy(): false;
    get isFalsey(): false;
    get isSpeculative(): true;
    get hasValue(): false;
    constructor(realm: Realm, sourceNode: $$AssignmentExpressionOrHigher, antecedents: readonly $SpeculativeValue[]);
    is(other: $AnyNonError | $SpeculativeValue): other is $Empty;
    ToObject(ctx: ExecutionContext): $Error;
    ToPropertyKey(ctx: ExecutionContext): $Error;
    ToLength(ctx: ExecutionContext): $Error;
    ToPrimitive(ctx: ExecutionContext): $Error;
    ToBoolean(ctx: ExecutionContext): $Error;
    ToNumber(ctx: ExecutionContext): $Error;
    ToInt32(ctx: ExecutionContext): $Error;
    ToUint32(ctx: ExecutionContext): $Error;
    ToInt16(ctx: ExecutionContext): $Error;
    ToUint16(ctx: ExecutionContext): $Error;
    ToInt8(ctx: ExecutionContext): $Error;
    ToUint8(ctx: ExecutionContext): $Error;
    ToUint8Clamp(ctx: ExecutionContext): $Error;
    ToString(ctx: ExecutionContext): $Error;
    GetValue(): $Error;
}
//# sourceMappingURL=speculative.d.ts.map