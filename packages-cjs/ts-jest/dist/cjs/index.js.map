{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["import { IOptionalPreprocessOptions, preprocess, preprocessOptions } from '@aurelia/plugin-conventions';\nimport tsJest from 'ts-jest';\nimport type { Config } from '@jest/types';\nimport type { TransformOptions, TransformedSource } from '@jest/transform';\nimport * as path from 'path';\n\nconst tsTransformer = tsJest.createTransformer();\n\nfunction _createTransformer(\n  conventionsOptions = {},\n  // for testing\n  _preprocess = preprocess,\n  _tsProcess = tsTransformer.process.bind(tsTransformer)\n) {\n  const au2Options = preprocessOptions(conventionsOptions as IOptionalPreprocessOptions);\n\n  function getCacheKey(\n    fileData: string,\n    filePath: Config.Path,\n    options: TransformOptions\n  ): string {\n    const tsKey = tsTransformer.getCacheKey!(fileData, filePath, options);\n    return `${tsKey}:${JSON.stringify(au2Options)}`;\n  }\n\n  // Wrap ts-jest process\n  function process(\n    sourceText: string,\n    sourcePath: Config.Path,\n    transformOptions: TransformOptions\n  ): TransformedSource | string {\n    const result = _preprocess(\n      { path: sourcePath, contents: sourceText },\n      au2Options\n    );\n    let newSourcePath = sourcePath;\n    if (result !== undefined) {\n      let newCode = result.code;\n      if (au2Options.templateExtensions.includes(path.extname(sourcePath))) {\n        // Rewrite foo.html to foo.html.ts, or foo.md to foo.md.ts\n        newSourcePath += '.ts';\n        newCode = `// @ts-nocheck\\n${newCode}`;\n      }\n      return _tsProcess(newCode, newSourcePath, transformOptions);\n    }\n    return _tsProcess(sourceText, sourcePath, transformOptions);\n  }\n\n  return {\n    canInstrument: false,\n    getCacheKey,\n    process\n  };\n}\n\nfunction createTransformer(conventionsOptions = {}) {\n  return _createTransformer(conventionsOptions);\n}\n\nconst { canInstrument, getCacheKey, process } = createTransformer();\nexport default { canInstrument, getCacheKey, process, createTransformer, _createTransformer };\n"],"names":["tsJest","preprocess","preprocessOptions","path"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,MAAM,aAAa,GAAGA,0BAAM,CAAC,iBAAiB,EAAE,CAAC;AAEjD,SAAS,kBAAkB,CACzB,kBAAkB,GAAG,EAAE;AACvB;AACA,WAAW,GAAGC,4BAAU,EACxB,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,EAAA;AAEtD,IAAA,MAAM,UAAU,GAAGC,mCAAiB,CAAC,kBAAgD,CAAC,CAAC;AAEvF,IAAA,SAAS,WAAW,CAClB,QAAgB,EAChB,QAAqB,EACrB,OAAyB,EAAA;AAEzB,QAAA,MAAM,KAAK,GAAG,aAAa,CAAC,WAAY,CAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QACtE,OAAO,CAAA,EAAG,KAAK,CAAA,CAAA,EAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA,CAAE,CAAC;KACjD;;AAGD,IAAA,SAAS,OAAO,CACd,UAAkB,EAClB,UAAuB,EACvB,gBAAkC,EAAA;AAElC,QAAA,MAAM,MAAM,GAAG,WAAW,CACxB,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,EAC1C,UAAU,CACX,CAAC;QACF,IAAI,aAAa,GAAG,UAAU,CAAC;QAC/B,IAAI,MAAM,KAAK,SAAS,EAAE;AACxB,YAAA,IAAI,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC;AAC1B,YAAA,IAAI,UAAU,CAAC,kBAAkB,CAAC,QAAQ,CAACC,eAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE;;gBAEpE,aAAa,IAAI,KAAK,CAAC;AACvB,gBAAA,OAAO,GAAG,CAAA,gBAAA,EAAmB,OAAO,CAAA,CAAE,CAAC;AACxC,aAAA;YACD,OAAO,UAAU,CAAC,OAAO,EAAE,aAAa,EAAE,gBAAgB,CAAC,CAAC;AAC7D,SAAA;QACD,OAAO,UAAU,CAAC,UAAU,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;KAC7D;IAED,OAAO;AACL,QAAA,aAAa,EAAE,KAAK;QACpB,WAAW;QACX,OAAO;KACR,CAAC;AACJ,CAAC;AAED,SAAS,iBAAiB,CAAC,kBAAkB,GAAG,EAAE,EAAA;AAChD,IAAA,OAAO,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;AAChD,CAAC;AAED,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,GAAG,iBAAiB,EAAE,CAAC;AACpE,YAAe,EAAE,aAAa,EAAE,WAAW,EAAE,OAAO,EAAE,iBAAiB,EAAE,kBAAkB,EAAE;;;;"}